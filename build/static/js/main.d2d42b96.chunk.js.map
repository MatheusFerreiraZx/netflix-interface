{"version":3,"sources":["Tmdb.js","components/MovieRow.js","components/FeaturedMovie.js","components/Header.js","App.js","index.js"],"names":["API_KEY","basicFetch","endpoint","a","fetch","req","json","getHomeList","slug","title","type","items","getMovieInfo","movieId","info","getTrailerVideo","trailer","className","style","width","results","length","map","item","key","src","poster_path","alt","original_title","firstDate","Date","first_air_date","genres","i","push","name","description","overview","substring","backgroundSize","backgroundPosition","backgroundImage","backdrop_path","original_name","vote_average","getFullYear","number_of_seasons","href","id","join","black","useState","movieList","setMovieList","featuredData","setFeaturedData","blackHeader","setBlackHeader","useEffect","Tmdb","list","originals","filter","randomChosen","Math","floor","random","chosen","chosenInfo","loadAll","scroolListener","window","scrollY","addEventListener","removeEventListener","role","target","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d2d42b96.chunk.js","sourcesContent":["const API_KEY = 'e01d6e1ad0500af29f6e468cb6cb741e';\nconst API_BASE = 'https://api.themoviedb.org/3';\n\n/*\n    - Originais da Netflix\n    - Recomendados (Trending)\n    - Em alta (Top rated)\n    - Ação\n    - Comédia\n    - Terror\n    - Romance\n    - Documentários\n*/\n\nconst basicFetch = async (endpoint) => {\n    const req = await fetch(`${API_BASE}${endpoint}`);\n    const json = await req.json();\n    return json;\n}\n\nexport default {\n    getHomeList: async () => {\n        return [\n            {\n                slug: 'originals',\n                title: 'Originais do Netflix',\n                type: 'tv',\n                items: await basicFetch(`/discover/tv?with_network=213&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'trending',\n                title: 'Recomendados para você',\n                type: 'tv',\n                items: await basicFetch(`/trending/all/week?language=pt-BR&api_key=${API_KEY}`)\n            }, \n            {\n                slug: 'toprated',\n                title: 'Em alta',\n                type: 'movie',\n                items: await basicFetch(`/movie/top_rated?language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'action',\n                title: 'Ação',\n                type: 'movie',\n                items: await basicFetch(`/discover/movie?with_genres=28&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'comedy',\n                title: 'Comédia',\n                type: 'movie',\n                items: await basicFetch(`/discover/movie?with_genres=35&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'horror',\n                title: 'Terror',\n                type: 'movie',\n                items: await basicFetch(`/discover/movie?with_genres=27&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'romance',\n                title: 'Romance',\n                type: 'movie',\n                items: await basicFetch(`/discover/movie?with_genres=10749&language=pt-BR&api_key=${API_KEY}`)\n            },\n            {\n                slug: 'documentary',\n                title: 'Documentários',\n                type: 'movie',\n                items: await basicFetch(`/discover/movie?with_genres=99&language=pt-BR&api_key=${API_KEY}`)\n            }\n        ]\n    },\n    getMovieInfo: async (movieId, type) => {\n        let info = {};\n\n        if(movieId){\n            switch(type){\n                case 'movie':\n                    info = await basicFetch(`/movie/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                case 'tv':\n                    info = await basicFetch(`/tv/${movieId}?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                default: \n                    info = null;\n                break;\n            }\n        }\n        return info;\n    },\n    getTrailerVideo: async (movieId, type) => {\n        let trailer = {};\n\n        if(movieId){\n            switch(type){\n                case 'movie':\n                    trailer = await basicFetch(`/movie/${movieId}/videos?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                case 'tv':\n                    trailer = await basicFetch(`/tv/${movieId}/videos?language=pt-BR&api_key=${API_KEY}`);\n                break;\n                default: \n                    trailer = null;\n                break;\n            }\n        }\n        return trailer;\n    },\n}","import React, { useState } from 'react';\nimport './MovieRow.css';\n\nexport default ({title, items}) => {\n    return (\n    <div className=\"movieRow\">\n            <h2>{title}</h2>\n            <div className=\"movieRow--listarea\">\n                <div className=\"movieRow--list\" style={{\n                    width: items.results.length * 150\n                }}>\n                    {items.results.length > 0 && items.results.map((item, key) => (\n                        <div key={key} className=\"movieRow--item\">\n                            <img src={`https://image.tmdb.org/t/p/w300${item.poster_path}`} alt={item.original_title} />\n                        </div>\n                    ))}\n                </div>\n            </div>\n        </div>\n    );\n}","import React from 'react';\n\nimport './FeaturedMovie.css';\n\nexport default ({item}) => {\n    let firstDate = new Date(item.first_air_date);\n    let genres = [];\n    for(let i in item.genres) {\n        genres.push( item.genres[i].name );\n    }\n\n    let description = item.overview;\n    if (description.length > 200) {\n        description = description.substring(0, 200)+'...';\n    }\n\n    return (\n        <section className=\"featured\" style={{\n            backgroundSize: 'cover',\n            backgroundPosition: 'center',\n            backgroundImage: `url(https://image.tmdb.org/t/p/original${item.backdrop_path})`\n        }}>\n            <div className=\"featured--vertical\">\n                <div className=\"featured--horizontal\">\n                    <div className=\"featured--name\">{item.original_name}</div>\n                    <div className=\"featured--info\">\n                        <div className=\"featured--points\">{item.vote_average} pontos</div>\n                        <div className=\"featured--year\">{firstDate.getFullYear()}</div>\n                        <div className=\"featured--seasons\">{item.number_of_seasons} temporada{item.number_of_seasons !== 1 ? 's' : ''}</div>\n                    </div>\n                    <div className=\"featured--description\">{description}</div>\n                    <div className=\"featured--buttons\">\n                        <a href={`/watch/${item.id}`} className=\"featured--watchbutton\">► Assistir</a>\n                        <a href={`/list/add/${item.id}`} className=\"featured--mylistbutton\">+ Minha Lista</a>\n                    </div>\n                    <div className=\"featured--genres\"><strong>Gêneros:</strong> {genres.join(', ')}</div>\n                </div>\n            </div>\n        </section>\n    );\n}","import React from 'react';\n\nimport './Header.css';\n\nexport default ({black}) => {\n    return (\n        <header className={black ? 'black' : ''}>\n            <div className=\"header--logo\">\n                <a href=\"/\">\n                    <img src=\"https://logodownload.org/wp-content/uploads/2014/10/netflix-logo-5-1.png\" alt=\"Netflix\" />\n                </a>\n            </div>\n            <div className=\"header--user\">\n                <a href=\"/\">\n                    <img src=\"https://pbs.twimg.com/profile_images/1240119990411550720/hBEe3tdn_400x400.png\" alt=\"Usuário\" />\n                </a>\n            </div>\n        </header>\n    );\n}","import React, { useEffect, useState } from 'react';\n\nimport Tmdb from './Tmdb'\nimport MovieRow from './components/MovieRow';\nimport FeaturedMovie from './components/FeaturedMovie'; \nimport Header from './components/Header';\n\nimport './App.css';\n\nexport default () => {\n\n  const [movieList, setMovieList] = useState([]);\n  const [featuredData, setFeaturedData] = useState(null);\n  const [blackHeader, setBlackHeader] = useState(false);\n\n  useEffect(() => {\n    const loadAll = async () => {\n      // Pegando a lista TOTAL\n      let list = await Tmdb.getHomeList();\n      setMovieList(list);\n\n      // Pegando o Featured\n      let originals = list.filter(i => i.slug === 'originals');\n      let randomChosen = Math.floor(Math.random() * (originals[0].items.results.length - 1));\n      let chosen = originals[0].items.results[randomChosen];\n      let chosenInfo = await Tmdb.getMovieInfo(chosen.id, 'tv');\n      setFeaturedData(chosenInfo);\n    }\n    \n    loadAll();\n  }, []);\n\n  useEffect(() => {\n    const scroolListener = () => {\n      if(window.scrollY > 10) {\n        setBlackHeader(true);\n      } else {\n        setBlackHeader(false);\n      }\n    }\n\n    window.addEventListener('scroll', scroolListener);\n    return () => {\n      window.removeEventListener('scroll', scroolListener);\n    }\n  }, []);\n\n  return (\n    <div className=\"page\">\n\n      <Header black={blackHeader} />\n\n      {featuredData && \n        <FeaturedMovie item={featuredData} />\n      }\n\n      <section className=\"lists\">\n        {movieList.map((item, key) => (\n          <MovieRow key={key} title={item.title} items={item.items} />\n        ))}\n      </section>\n\n      <footer>\n        Feito por <span role=\"img\" aria-label=\"Matheus\"></span><a href=\"https://github.com/MatheusFerreiraZx\" target=\"_black\">MatheusFerreiraZx</a> \n        <br/><span role=\"img\" aria-label=\"fogo\">🔥</span> Clone do NETFLIX em REACTJS <strong> em 27/08/2021</strong><br/><br/>\n        Direitos de imagem para Netflix<br/>\n        Dados pegos do site Themoviedb.org\n      </footer>\n      \n      {movieList.length <= 0 &&\n        <div className=\"loading\">\n            <img src=\"https://www.filmelier.com/pt/br/news/wp-content/uploads/2020/03/netflix-loading.gif\" alt=\"Carregando\" />\n        </div>\n      }\n    </div>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}